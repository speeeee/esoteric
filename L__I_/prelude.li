~ Prelude: a module containing rules essential to programming in LM.
  16 November 2015
-------------------------------------------------------------------~
$
~ and x y : logical AND ~
(:- and (lambda x (if (car x) (car (cdr x)) False)))
~ or x y : logical OR ~
(:- or (lambda x (if (car x) True (car (cdr x)))))

~ basic list operations ~

~ cadr x : second element of a list ~
(:- cadr (lambda x (car (cdr (car x)))))

~ length list : retrieves the length of a list ~
(:- length (lambda x (if (list? (car x)) (length$ (car x) 0) False)))
(:- length$ (lambda x (if (empty? (car x)) (cadr x) 
                          (length$ (cdr (car x)) (std-add (cadr x) 1)))))